#!/usr/bin/env python


# -------
# Imports
# -------

from argparse import ArgumentParser

from spectroscopy.utilities import eigenvectors_to_eigendisplacements

from spectroscopy.interfaces.vasp_interface import (
    read_poscar, parse_outcar)

from spectroscopy.cli.io_helper import (
    write_structures_raman, read_dielectric_tensors)

from spectroscopy.cli.parser import update_parser, post_process_args

from spectroscopy.cli.runtime import (
    run_mode_raman_disp, run_mode_raman_read, run_mode_raman_postproc)


# ----
# Main
# ----

if __name__ == "__main__":
    # Parse command-line arguments.

    parser = ArgumentParser(
        description="Simulate Raman spectra starting from a VASP "
                    "phonon calculation")

    # Add input-files argument group.

    group = parser.add_argument_group("Input files")

    group.add_argument(
        "--poscar",
        metavar="<file_path>", type=str, dest="POSCARPath", default="POSCAR",
        help="POSCAR file to read structure from (default: POSCAR)")

    group.add_argument(
        "--outcar",
        metavar="<file_path>", type=str, dest="OUTCARPath", default="OUTCAR",
        help="OUTCAR file to read frequencies and eigenvectors from "
             "(default: OUTCAR)")

    # Add standard arguments groups.

    update_parser(parser, 'raman')

    # Parse and process arguments.

    args = parser.parse_args()

    post_process_args(args, 'raman')

    if args.RunMode is None:
        raise Exception(
            "Error: Please specify a run mode with one of the "
            "-d/--create_disp, -r/--read or -p/--post_process options.")

    elif args.RunMode == 'raman_disp':
        # Read structure from POSCAR file.

        structure = None

        if args.RunMode == 'raman_disp':
            _, lattice_vectors, atomic_symbols, atom_positions = \
                read_poscar(args.POSCARPath)

            structure = (lattice_vectors, atomic_symbols, atom_positions)

        # Read phoon frequencies and eigenvectors from OUTCAR file.

        frequencies, eigendisplacements = None, None

        outcar_data = parse_outcar(
            args.OUTCARPath, extract_list=['atomic_masses', 'phonon_modes'])

        frequency_sets, eigenvectors = outcar_data['phonon_modes']

        # The third set of frequencies output by VASP are in inv. cm.

        frequencies = frequency_sets[2]

        # Convert eigenvectors to eigendisplacements.

        eigendisplacements = eigenvectors_to_eigendisplacements(
            eigenvectors, outcar_data['atomic_masses'])
        
        # Generate and write out displaced structures.

        disp_sets = run_mode_raman_disp(
            structure, frequencies, 'inv_cm', eigendisplacements, args)

        write_structures_raman(
            disp_sets, file_format='vasp_poscar',
            output_prefix=args.OutputPrefix)

    elif args.RunMode == 'raman_read':
        eps_tensors = read_dielectric_tensors(
            args.RamanInputFiles, file_format='vasp_outcar')

        run_mode_raman_read(eps_tensors, args)

    elif args.RunMode == 'raman_postproc':
        run_mode_raman_postproc(args)
