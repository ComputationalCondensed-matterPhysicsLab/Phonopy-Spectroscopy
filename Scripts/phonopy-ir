#!/usr/bin/env python


# -------
# Imports
# -------

from argparse import ArgumentParser

from SpectroscoPy.Utilities import eigenvectors_to_eigendisplacements

from SpectroscoPy.Interfaces.Phonopy import readborn

from SpectroscoPy.CLI.Parser import update_parser, post_process_args

from SpectroscoPy.CLI.Phonopy import (phonopy_update_parser,
                                      phonopy_loaddata_core,
                                      phonopy_loaddata_optional
                                      )
from SpectroscoPy.CLI.Runtime import runmode_ir


# ----
# Main
# ----

if __name__ == "__main__":
    # Parse command-line arguments.

    parser = ArgumentParser(
        description="Simulate IR spectra using Phonopy calculations"
        )

    # Add standard Phonopy argument groups.

    phonopy_update_parser(parser, 'ir')

    # Add standard arguments groups.

    update_parser(parser, 'ir', supportedfeatures=['ir_reps'])

    # Parse and process arguments.

    args = parser.parse_args()

    post_process_args(args, 'ir')

    # Read input data.

    inputData = phonopy_loaddata_core(
        args, extractlist=['structure', 'atomic_masses', 'phonon_modes']
        )

    structure = inputData['structure']
    atomicMasses = inputData['atomic_masses']

    frequencies, eigenvectors = inputData['phonon_modes']

    # Convert eigenvectors to eigendisplacements.

    eigendisplacements = eigenvectors_to_eigendisplacements(
        eigenvectors, atomicMasses
        )

    # Read Born effective-charge tensors.

    becTensors = readborn(structure, filepath=args.BORNFile)

    # Read ir. rep. data and/or linewidths, if required.

    linewidths, irRepData = phonopy_loaddata_optional(args)

    # Hand over to the RunMode_IR() routine.

    runmode_ir(
        frequencies, 'thz', eigendisplacements, becTensors, args,
        linewidths=linewidths, irrepdata=irRepData
        )
