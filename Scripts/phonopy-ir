#!/usr/bin/env python


# -------
# Imports
# -------

from argparse import ArgumentParser;

from SpectroscoPy.Utilities import EigenvectorsToEigendisplacements;

from SpectroscoPy.Interfaces.Phonopy import ReadBORN;

from SpectroscoPy.CLI.Parser import UpdateParser, PostProcessArgs;
from SpectroscoPy.CLI.Phonopy import Phonopy_UpdateParser, Phonopy_LoadData_Core, Phonopy_LoadData_Optional;
from SpectroscoPy.CLI.Runtime import RunMode_IR;


# ----
# Main
# ----

if __name__ == "__main__":
    # Parse command-line arguments.

    parser = ArgumentParser(
        description = "Simulate IR spectra using Phonopy calculations"
        );

    # Add standard Phonopy argument groups.

    Phonopy_UpdateParser(parser, 'ir');

    # Add standard arguments groups.

    UpdateParser(parser, 'ir', supportedFeatures = ['ir_reps']);

    # Parse and process arguments.

    args = parser.parse_args();

    PostProcessArgs(args, 'ir');

    # Read input data.

    inputData = Phonopy_LoadData_Core(
        args, extractList = ['structure', 'atomic_masses', 'phonon_modes']
        );

    structure = inputData['structure'];
    atomicMasses = inputData['atomic_masses'];

    frequencies, eigenvectors = inputData['phonon_modes'];

    # Convert eigenvectors to eigendisplacements.

    eigendisplacements = EigenvectorsToEigendisplacements(
        eigenvectors, atomicMasses
        );

    # Read Born effective-charge tensors.

    becTensors = ReadBORN(structure, filePath = args.BORNFile);

    # Read ir. rep. data and/or linewidths, if required.

    linewidths, irRepData = Phonopy_LoadData_Optional(args);

    # Hand over to the RunMode_IR() routine.

    RunMode_IR(
        frequencies, 'thz', eigendisplacements, becTensors, args, linewidths = linewidths, irRepData = irRepData
        );
