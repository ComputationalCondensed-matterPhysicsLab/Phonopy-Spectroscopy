#!/usr/bin/env python


# -------
# Imports
# -------

from argparse import ArgumentParser

from SpectroscoPy.Utilities import eigenvectors_to_eigendisplacements

from SpectroscoPy.Interfaces.VASP import readposcar, parseoutcar

from SpectroscoPy.CLI.IOHelper import (writestructuresraman,
                                       read_dielectric_tensors
                                       )

from SpectroscoPy.CLI.Parser import update_parser, post_process_args

from SpectroscoPy.CLI.Runtime import (runmode_raman_disp,
                                      runmode_raman_read,
                                      runmode_raman_postproc
                                      )


# ----
# Main
# ----

if __name__ == "__main__":
    # Parse command-line arguments.

    parser = ArgumentParser(
        description="Simulate Raman spectra starting from a VASP \
        phonon calculation"
        )

    # Add input-files argument group.

    group = parser.add_argument_group("Input files")

    group.add_argument(
        "--poscar",
        metavar="<file_path>",
        type=str, dest="POSCARPath",
        default="POSCAR",
        help="POSCAR file to read structure from (default: POSCAR)"
        )

    group.add_argument(
        "--outcar",
        metavar="<file_path>",
        type=str, dest="OUTCARPath",
        default="OUTCAR",
        help="OUTCAR file to read frequencies and eigenvectors from \
        (default: OUTCAR)"
        )

    # Add standard arguments groups.

    update_parser(parser, 'raman')

    # Parse and process arguments.

    args = parser.parse_args()

    post_process_args(args, 'raman')

    # If required, read POSCAR file.

    structure = None

    if args.RunMode == 'raman_disp':
        _, latticeVectors, atomicSymbols, atomPositions = \
            readposcar(args.POSCARPath)

        structure = (latticeVectors, atomicSymbols, atomPositions)

    # If required, read OUTCAR file.

    frequencies, eigendisplacements = None, None

    if args.RunMode == 'raman_disp':
        outcarData = parseoutcar(args.OUTCARPath, extractlist=[
            'atomic_masses', 'phonon_modes']
            )

        frequencySets, eigenvectors = outcarData['phonon_modes']

        # The third set of frequencies output by VASP are in inv. cm.

        frequencies = frequencySets[2]

        # Convert eigenvectors to eigendisplacements if needed.

        eigendisplacements = eigenvectors_to_eigendisplacements(
            eigenvectors, outcarData['atomic_masses']
            )

    # Call the RunMode_Raman_*() routines and post-process output.

    if args.RunMode is None:
        raise Exception("Error: Please specify a run mode with one of the \
                        -d/--create_disp, -r/--read or -p/--post_process \
                        options.")

    elif args.RunMode == 'raman_disp':
        dispSetsList = runmode_raman_disp(
            structure, frequencies, 'inv_cm', eigendisplacements, args
            )

        writestructuresraman(
            dispSetsList, fileformat='vasp_poscar',
            outputprefix=args.OutputPrefix
            )

    elif args.RunMode == 'raman_read':
        epsTensors = read_dielectric_tensors(
            args.RamanInputFiles, fileformat='vasp_outcar'
            )

        runmode_raman_read(
            epsTensors, args
            )

    elif args.RunMode == 'raman_postproc':
        runmode_raman_postproc(args)
