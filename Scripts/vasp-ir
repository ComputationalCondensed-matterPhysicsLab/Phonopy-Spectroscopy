#!/usr/bin/env python


# -------
# Imports
# -------

from argparse import ArgumentParser

from SpectroscoPy.Utilities import eigenvectors_to_eigendisplacements

from SpectroscoPy.Interfaces.VASP import parseoutcar

from SpectroscoPy.CLI.Parser import update_parser, post_process_args
from SpectroscoPy.CLI.Runtime import runmode_ir


# ----
# Main
# ----

if __name__ == "__main__":
    # Parse command-line arguments.

    parser = ArgumentParser(
        description="Simulate IR spectra from VASP phonon-frequency and \
        Born-charge calculations"
        )

    # Add input-files argument group.

    group = parser.add_argument_group("Input files")

    group.add_argument(
        "--outcar_freq",
        metavar="<file_path>",
        type=str, dest="OUTCARFreqPath",
        default="OUTCAR",
        help="OUTCAR file to read frequencies and eigenvectors from \
        (default: OUTCAR)"
        )

    group.add_argument(
        "--outcar_born",
        metavar="<file_path>",
        type=str, dest="OUTCARBornPath",
        default="OUTCAR",
        help="OUTCAR file to read Born charges from (default: OUTCAR)"
        )

    # Add standard arguments groups.

    update_parser(parser, 'ir')

    # Parse and process arguments.

    args = parser.parse_args()

    post_process_args(args, 'ir')

    # Read input files.

    outcarData = None

    if args.OUTCARFreqPath == args.OUTCARBornPath:
        outcarData = parseoutcar(
            args.OUTCARFreqPath, extractlist=['atomic_masses',
                                              'phonon_modes', 'born_charges']
            )
    else:
        outcarData = parseoutcar(
            args.OUTCARFreqPath, extractlist=['atomic_masses',
                                              'phonon_modes']
            )

        outcarData2 = parseoutcar(
            args.OUTCARBornPath, extractlist=['born_charges']
            )

        outcarData['born_charges'] = outcarData2['born_charges']

    # Convert eigenvectors to eigendisplacements.

    frequencySets, eigenvectors = outcarData['phonon_modes']

    eigendisplacements = eigenvectors_to_eigendisplacements(
        eigenvectors, outcarData['atomic_masses']
        )

    # Pass the input data to runmode_ir() for processing.

    runmode_ir(
        frequencySets[2], 'inv_cm', eigendisplacements,
        outcarData['born_charges'], args
        )
