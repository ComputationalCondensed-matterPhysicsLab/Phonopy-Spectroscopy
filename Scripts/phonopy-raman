#!/usr/bin/env python


# -------
# Imports
# -------

from argparse import ArgumentParser

from SpectroscoPy.Utilities import eigenvectors_to_eigendisplacements

from SpectroscoPy.CLI.IOHelper import (writestructuresraman,
                                       read_dielectric_tensors
                                       )

from SpectroscoPy.CLI.Parser import update_parser, post_process_args

from SpectroscoPy.CLI.Phonopy import (phonopy_update_parser,
                                      phonopy_loaddata_core,
                                      phonopy_loaddata_optional
                                      )
                                    
from SpectroscoPy.CLI.Runtime import (runmode_raman_disp,
                                      runmode_raman_read,
                                      runmode_raman_postproc
                                      )


# ----
# Main
# ----

if __name__ == "__main__":
    # Parse command-line arguments.

    parser = ArgumentParser(
        description="Simulate Raman spectra starting from a \
        Phonopy calculation"
        )

    # Add standard Phonopy argument groups.

    phonopy_update_parser(parser, 'raman')

    # Add standard arguments groups.

    update_parser(parser, 'raman', supportedfeatures=['ir_reps'])

    # Parse and process arguments.

    args = parser.parse_args()

    post_process_args(args, 'raman')

    # If creating displacements, read the structure, atomic masses and
    # Gamma-point frequencies/eigenvectors.

    structure = None
    frequencies, eigendisplacements = None, None

    if args.RunMode == 'raman_disp':
        # Read input data.

        inputData = phonopy_loaddata_core(
            args, extractlist=['structure', 'atomic_masses', 'phonon_modes']
            )

        structure = inputData['structure']

        frequencies, eigenvectors = inputData['phonon_modes']

        # Convert eigenvectors to eigendisplacements.

        eigendisplacements = eigenvectors_to_eigendisplacements(
            eigenvectors, inputData['atomic_masses']
            )

    # If post-processing, read the ir. rep. data and/or linewidths if required.

    linewidths, irRepData = None, None

    if args.RunMode == 'raman_postproc':
        linewidths, irRepData = phonopy_loaddata_optional(args)

    # Hand over to one of the RunMode_Raman_*() routines.

    if args.RunMode is None:
        raise Exception("Error: Please specify a run mode with one of the \
                        -d/--create_disp, -r/--read or -p/--post_process \
                        options."
                        )

    elif args.RunMode == 'raman_disp':
        dispSetsList = runmode_raman_disp(
            structure, frequencies, 'thz', eigendisplacements, args
            )

        writestructuresraman(
            dispSetsList, fileformat='vasp_poscar',
            outputprefix=args.OutputPrefix
            )

    elif args.RunMode == 'raman_read':
        epsTensors = read_dielectric_tensors(
            args.RamanInputFiles, fileformat='vasp_outcar'
            )

        runmode_raman_read(
            epsTensors, args
            )

    elif args.RunMode == 'raman_postproc':
        runmode_raman_postproc(
            args, linewidths=linewidths, irrepdata=irRepData
            )
